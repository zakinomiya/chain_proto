// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gw

import (
	context "context"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// HTTPServiceClient is the client API for HTTPService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HTTPServiceClient interface {
	SendTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*empty.Empty, error)
	// rpc GetTransactionByHash(google.protobuf.Empty) returns (GetTransactionResponse) {
	//     option (google.api.http) = {
	//         get: "/transactions/{tx_hash}"
	//     };
	// }
	SendBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (*SendBlockResponse, error)
}

type hTTPServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHTTPServiceClient(cc grpc.ClientConnInterface) HTTPServiceClient {
	return &hTTPServiceClient{cc}
}

func (c *hTTPServiceClient) SendTransaction(ctx context.Context, in *Transaction, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/gw.HTTPService/SendTransaction", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *hTTPServiceClient) SendBlock(ctx context.Context, in *Block, opts ...grpc.CallOption) (*SendBlockResponse, error) {
	out := new(SendBlockResponse)
	err := c.cc.Invoke(ctx, "/gw.HTTPService/SendBlock", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HTTPServiceServer is the server API for HTTPService service.
// All implementations must embed UnimplementedHTTPServiceServer
// for forward compatibility
type HTTPServiceServer interface {
	SendTransaction(context.Context, *Transaction) (*empty.Empty, error)
	// rpc GetTransactionByHash(google.protobuf.Empty) returns (GetTransactionResponse) {
	//     option (google.api.http) = {
	//         get: "/transactions/{tx_hash}"
	//     };
	// }
	SendBlock(context.Context, *Block) (*SendBlockResponse, error)
	mustEmbedUnimplementedHTTPServiceServer()
}

// UnimplementedHTTPServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHTTPServiceServer struct {
}

func (UnimplementedHTTPServiceServer) SendTransaction(context.Context, *Transaction) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTransaction not implemented")
}
func (UnimplementedHTTPServiceServer) SendBlock(context.Context, *Block) (*SendBlockResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendBlock not implemented")
}
func (UnimplementedHTTPServiceServer) mustEmbedUnimplementedHTTPServiceServer() {}

// UnsafeHTTPServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HTTPServiceServer will
// result in compilation errors.
type UnsafeHTTPServiceServer interface {
	mustEmbedUnimplementedHTTPServiceServer()
}

func RegisterHTTPServiceServer(s grpc.ServiceRegistrar, srv HTTPServiceServer) {
	s.RegisterService(&_HTTPService_serviceDesc, srv)
}

func _HTTPService_SendTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Transaction)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPServiceServer).SendTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.HTTPService/SendTransaction",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPServiceServer).SendTransaction(ctx, req.(*Transaction))
	}
	return interceptor(ctx, in, info, handler)
}

func _HTTPService_SendBlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Block)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HTTPServiceServer).SendBlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gw.HTTPService/SendBlock",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HTTPServiceServer).SendBlock(ctx, req.(*Block))
	}
	return interceptor(ctx, in, info, handler)
}

var _HTTPService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gw.HTTPService",
	HandlerType: (*HTTPServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTransaction",
			Handler:    _HTTPService_SendTransaction_Handler,
		},
		{
			MethodName: "SendBlock",
			Handler:    _HTTPService_SendBlock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "http_service.proto",
}
