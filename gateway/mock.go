// Code generated by MockGen. DO NOT EDIT.
// Source: ./gateway.go

// Package mock_gateway is a generated GoMock package.
package mock_gateway

import (
	account "chain_proto/account"
	block "chain_proto/block"
	transaction "chain_proto/transaction"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockBlockchain is a mock of Blockchain interface
type MockBlockchain struct {
	ctrl     *gomock.Controller
	recorder *MockBlockchainMockRecorder
}

// MockBlockchainMockRecorder is the mock recorder for MockBlockchain
type MockBlockchainMockRecorder struct {
	mock *MockBlockchain
}

// NewMockBlockchain creates a new mock instance
func NewMockBlockchain(ctrl *gomock.Controller) *MockBlockchain {
	mock := &MockBlockchain{ctrl: ctrl}
	mock.recorder = &MockBlockchainMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockBlockchain) EXPECT() *MockBlockchainMockRecorder {
	return m.recorder
}

// GetBlockByHash mocks base method
func (m *MockBlockchain) GetBlockByHash(hash string) (*block.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHash", hash)
	ret0, _ := ret[0].(*block.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHash indicates an expected call of GetBlockByHash
func (mr *MockBlockchainMockRecorder) GetBlockByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHash", reflect.TypeOf((*MockBlockchain)(nil).GetBlockByHash), hash)
}

// GetBlockByHeight mocks base method
func (m *MockBlockchain) GetBlockByHeight(height int32) (*block.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlockByHeight", height)
	ret0, _ := ret[0].(*block.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlockByHeight indicates an expected call of GetBlockByHeight
func (mr *MockBlockchainMockRecorder) GetBlockByHeight(height interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlockByHeight", reflect.TypeOf((*MockBlockchain)(nil).GetBlockByHeight), height)
}

// GetBlocks mocks base method
func (m *MockBlockchain) GetBlocks(offset, limit int32) ([]*block.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBlocks", offset, limit)
	ret0, _ := ret[0].([]*block.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBlocks indicates an expected call of GetBlocks
func (mr *MockBlockchainMockRecorder) GetBlocks(offset, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBlocks", reflect.TypeOf((*MockBlockchain)(nil).GetBlocks), offset, limit)
}

// AddBlock mocks base method
func (m *MockBlockchain) AddBlock(block *block.Block) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddBlock", block)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddBlock indicates an expected call of AddBlock
func (mr *MockBlockchainMockRecorder) AddBlock(block interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddBlock", reflect.TypeOf((*MockBlockchain)(nil).AddBlock), block)
}

// GetLatestBlock mocks base method
func (m *MockBlockchain) GetLatestBlock() (*block.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLatestBlock")
	ret0, _ := ret[0].(*block.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLatestBlock indicates an expected call of GetLatestBlock
func (mr *MockBlockchainMockRecorder) GetLatestBlock() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLatestBlock", reflect.TypeOf((*MockBlockchain)(nil).GetLatestBlock))
}

// GetTxsByBlockHash mocks base method
func (m *MockBlockchain) GetTxsByBlockHash(blockHash string) ([]*transaction.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTxsByBlockHash", blockHash)
	ret0, _ := ret[0].([]*transaction.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTxsByBlockHash indicates an expected call of GetTxsByBlockHash
func (mr *MockBlockchainMockRecorder) GetTxsByBlockHash(blockHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTxsByBlockHash", reflect.TypeOf((*MockBlockchain)(nil).GetTxsByBlockHash), blockHash)
}

// GetTransactionByHash mocks base method
func (m *MockBlockchain) GetTransactionByHash(hash string) (*transaction.Transaction, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTransactionByHash", hash)
	ret0, _ := ret[0].(*transaction.Transaction)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTransactionByHash indicates an expected call of GetTransactionByHash
func (mr *MockBlockchainMockRecorder) GetTransactionByHash(hash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTransactionByHash", reflect.TypeOf((*MockBlockchain)(nil).GetTransactionByHash), hash)
}

// AddTransaction mocks base method
func (m *MockBlockchain) AddTransaction(tx *transaction.Transaction) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTransaction", tx)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTransaction indicates an expected call of AddTransaction
func (mr *MockBlockchainMockRecorder) AddTransaction(tx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTransaction", reflect.TypeOf((*MockBlockchain)(nil).AddTransaction), tx)
}

// GetAccount mocks base method
func (m *MockBlockchain) GetAccount(addr string) (*account.Account, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", addr)
	ret0, _ := ret[0].(*account.Account)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockBlockchainMockRecorder) GetAccount(addr interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockBlockchain)(nil).GetAccount), addr)
}

// AddPeer mocks base method
func (m *MockBlockchain) AddPeer(host string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddPeer", host)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddPeer indicates an expected call of AddPeer
func (mr *MockBlockchainMockRecorder) AddPeer(host interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddPeer", reflect.TypeOf((*MockBlockchain)(nil).AddPeer), host)
}

// Sync mocks base method
func (m *MockBlockchain) Sync(offset int) ([]*block.Block, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sync", offset)
	ret0, _ := ret[0].([]*block.Block)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Sync indicates an expected call of Sync
func (mr *MockBlockchainMockRecorder) Sync(offset interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sync", reflect.TypeOf((*MockBlockchain)(nil).Sync), offset)
}
