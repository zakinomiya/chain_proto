syntax = "proto3";

package gw;

import "google/protobuf/empty.proto";
import "google/api/annotations.proto";

option go_package = "go_chain/gateway/gw";

service HTTPService {
    rpc SendTransaction(Transaction) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/transactions"
            body: "*"
        };
    }
    // rpc GetTransactionByHash(google.protobuf.Empty) returns (GetTransactionResponse) {
    //     option (google.api.http) = {
    //         get: "/transactions/{tx_hash}"
    //     };
    // }
    rpc SendBlock(Block) returns (SendBlockResponse) {
        option (google.api.http) = {
            post: "/blocks"
            body: "*"
        };
    }
    // rpc GetBlockByHeight(google.protobuf.Empty) returns (Block) {
    //     option (google.api.http) = {
    //         post: "/blocks/{block_height}"
    //     };
    // }
    // rpc GetBlockByHash(google.protobuf.Empty) returns (Block) {
    //     option (google.api.http) = {
    //         post: "/blocks/{block_hash}"
    //     };
    // }
}

message Transaction {
    string tx_hash = 1; 
    uint32 total_value = 2;
    float fee = 3;
    string sender_addr = 4;
    int64 timestamp = 5;
    string signature = 6;
    repeated Output outs = 7;
}

message Output {
    string recipientAddr = 1;
    float value = 2;
}

message SendTransactionResponse {
    enum Status {
        ACCEPTED = 0;
        DECLINED = 1;
    }
    Status status = 1;
}

message GetTransactionResponse {
    enum Status {
        PENDING = 0;
        FIXED = 1;
    }

    Status status = 1;
    Transaction transaction = 2;
    int32 block_height = 3;
}

message Block {
    uint32 height = 1;
    string hash = 2; 
    string prev_block_hash = 3;    
    repeated Transaction transactions = 4;
    uint32 extra_nonce = 5;
    string merkle_root = 6;   
    uint64 timestamp = 7;    
    uint32 bits = 8;
    uint32 nonce = 9;
}

message SendBlockResponse {
    enum Status {
        ACCEPTED = 0;
        DECLINED = 1;
    }
    Status status = 1;
}

message Account {
    string addr = 1;
    float balance = 2;
}

message Peer {
    string host = 1;
}

